* Glip

** Intuduction
Glip is /Go Local In Project/. It keeps your Go packages local to the
project you're working on, so that you can have two or more Go
projects depend on different version of the same package.

The =glip= command simply proxies to the =go= command. You must use it
in place of =go=.

** How to use Glip
Simply import the packages you want, in the files you will use them in.

#+BEGIN_SRC go
package main

import (
        "fmt"
        fb "github.com/google/flatbuffers/go"
)

func main() {
	builder := fb.NewBuilder(0)
	fmt.Println("%v", builder)
}
#+END_SRC

Then tell =glip= to fetch any packages you're using. This will store
the packages in a directory called =go_modules= just like =npm= does.

#+BEGIN_SRC sh
$ ./glip get
#+END_SRC

Then build with =glip=

#+BEGIN_SRC sh
$ ./glip build -o runme
#+END_SRC

*IMPORTANT:* If you're testing =glip= inside this directory named
 =glip=, you must specify the =-o <executable>= option otherwise you
 will overwrite =glip=. If the directory has any other name you don't
 need the =-o <executable>= option.

** Package Pinning: best practice
If you need to use a package at a specific version it is best to fork
the package and use a little git voodoo. As an example we'll fork the
package "github.com/keltia/leftpad" and force it to be at commit
=c03425e=. Start by forking on GitHub, then make a local clone.

#+BEGIN_SRC sh
$ git clone git@github.com:eddieh/leftpad.git && cd leftpad
$ git reset --hard c03425e
$ git push -f origin master
#+END_SRC

The new package "github.com/eddieh/leftpad" is now ready to use.

#+BEGIN_SRC go
package main

import (
        "fmt"
        fb "github.com/google/flatbuffers/go"
        lp "github.com/eddieh/leftpad"
)

func main() {
	builder := fb.NewBuilder(0)
        fmt.Println(lp.LeftPadStr("=", 40, "="))
	fmt.Println("%v", builder)
        fmt.Println(lp.LeftPadStr("=", 40, "="))
}
#+END_SRC

Now use =glip= to fetch the packages and build.

#+BEGIN_SRC sh
$ ./glip get
$ ./glip build -o runme
#+END_SRC

As a bonus leftpad will never vanish and break your build â€” unless you
delete your fork. Don't delete your fork ;)
